node() {
    stage 'Checkout'
    dir('jenkinsfile'){
        deleteDir()
        git url: 'http://github.com/xianyouQ/jenkinsfile.git'        
    }
    dir('source'){
        // clean source dir
        deleteDir()
        // source code
        git url: 'https://github.com/xianyouQ/renren-security.git', branch: "${branch}"
    }
    stage 'Chkconfig'
    dir('source'){
        poolcode = "${poolcode}"
        //default output file 
        buildfile = "renren-admin/target/renren-admin.jar.original"
        libpath = "renren-admin/target/dependency"
        //archive file name
        Filename = "${context}-${version}.jar"
        // set build username
        wrap([$class: 'BuildUser']) {
            Username = env.BUILD_USER_ID
        }
        echo "poolCode:$poolcode"
        echo "appType:$apptype"
        echo "version:$version"
        echo "context:$context"
        echo "branch:$branch"
        echo "envType:$envtype"
        echo "springbootVersion:$springbootversion"
        echo "mainclass:$mainclass"

        if (params.platform == null ){
           platform= "vmdocker"
        }
        echo "buildUser:$Username"
        
        
        

    }
    stage 'Building'
    def mvnHome = tool name: 'maven', type: 'maven'
    dir('jenkinsfile'){
        sh "${mvnHome}/bin/mvn -f pom.xml clean dependency:copy-dependencies"
        sh "ls -l target/dependency >> baseJar.list"
    }
    dir('source'){
        sh "${mvnHome}/bin/mvn -f pom.xml clean install"
        sh "${mvnHome}/bin/mvn -f pom.xml dependency:copy-dependencies"
    }
    stage "Archive"
    dir('output'){ 
       // clean output
       deleteDir()
       // Write an useful file, which is needed to be archived.
       sh "cp ../jenkinsfile/baseJar.list ."
       sh "cp ../source/${buildfile} $Filename"
       sh "mv  ../source/${libpath} lib"
       sh "for jar in `ls lib`; do grep ${jar} baseJar.list >> /dev/null;if [ $? -eq 0 ];then rm -f lib/${jar};fi ;done"
       // set properties
       writeFile encoding: 'utf-8', file: 'env.properties', text: """
POOL_CODE=$poolcode
APP_VERSION=$version
APP_CONTEXT=$context
"""
       //add env.properties and disconf.properties to jar
       def javaHome = tool name: 'jdk8', type: 'jdk'
       sh "${javaHome}/bin/jar -uf $Filename env.properties"
       sh "rm -fr  env.properties"
       sh "mv $Filename lib/"
       sh 'ls '
       sh "rm -f Dockerfile"
       writeFile encoding: 'utf-8', file: 'Dockerfile', text: """
FROM  harbor.youxian.com/springboot/base:${springbootversion}
RUN test -d /home/youxian/webapps || install -m 777 /home/youxian/webapps
ADD lib/* /home/youxian/webapps/lib
CMD /usr/local/jdk8/bin/java -cp /home/youxian/webapps/lib/*.jar -Dloader.main=${mainclass} org.springframework.boot.loader.PropertiesLauncher
EXPOSE 8080
"""
       sh "cat Dockerfile "

       // set properties to spinnaker
       writeFile encoding: 'utf-8', file: 'env.properties', text: """
jobName=$JOB_NAME
appType=$apptype
poolCode=$poolcode
envType=$envtype
context=$context
version=$version
extension=
buildUser=$Username
"""
    }
    // share output
    stash name: 'share_output', includes: "output/*"
    // Archive the build output artifacts.
    archiveArtifacts artifacts: "output/*"
    
}

// build docker
node() {
   stage 'Create Docker'
   dir("docker"){
     deleteDir()
     unstash  'share_output'
     dir('output'){
        sh 'ls -l '
        sh "cat Dockerfile"

        Tag = "$version"
        Image = "harbor.youxian.com/library/${context}"
        // docker build and push
        sh "docker build -t $Image:$Tag -f Dockerfile ."
        sh "docker push $Image:$Tag "
        // clearn docker image
        sh "docker image ls"
        sh "docker image rm -f $Image:$Tag "
     }
   }
}
